-- Create the ticket_conversations table in the service schema
DO $$
BEGIN
    -- Create the ticket_conversations table if it doesn't exist
    CREATE TABLE IF NOT EXISTS service.ticket_conversations (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        ticket_id UUID NOT NULL REFERENCES service.tickets(id) ON DELETE CASCADE,
        user_id UUID REFERENCES auth.users(id),
        
        -- Content
        content TEXT NOT NULL,
        content_type VARCHAR(20) DEFAULT 'text',
        
        -- Conversation type
        is_internal BOOLEAN DEFAULT false,
        is_system_message BOOLEAN DEFAULT false,
        
        -- Message properties
        message_type VARCHAR(20) DEFAULT 'comment',
        
        -- Timestamps
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        
        -- Constraints
        CONSTRAINT valid_content_type CHECK (content_type IN ('text', 'html')),
        CONSTRAINT valid_message_type CHECK (message_type IN ('comment', 'status_change', 'assignment_change'))
    );
    
    -- Add column comments for ticket_conversations table
    COMMENT ON TABLE service.ticket_conversations IS 'Conversation entries for tickets including comments and system messages';
    COMMENT ON COLUMN service.ticket_conversations.id IS 'Unique identifier for the conversation entry';
    COMMENT ON COLUMN service.ticket_conversations.ticket_id IS 'Reference to the ticket this conversation belongs to';
    COMMENT ON COLUMN service.ticket_conversations.user_id IS 'Reference to user in auth.users who wrote this message, NULL for system-generated messages';
    COMMENT ON COLUMN service.ticket_conversations.content IS 'The actual message content or note';
    COMMENT ON COLUMN service.ticket_conversations.content_type IS 'Format of the content: text or html';
    COMMENT ON COLUMN service.ticket_conversations.is_internal IS 'Whether this is an internal note (true) or customer-visible message (false)';
    COMMENT ON COLUMN service.ticket_conversations.is_system_message IS 'Whether this message was automatically generated by the system';
    COMMENT ON COLUMN service.ticket_conversations.message_type IS 'Type of message: comment, status_change, or assignment_change';
    COMMENT ON COLUMN service.ticket_conversations.created_at IS 'Timestamp when the message was created';
    COMMENT ON COLUMN service.ticket_conversations.updated_at IS 'Timestamp when the message was last edited';
    
    -- Create indexes for performance
    CREATE INDEX IF NOT EXISTS idx_service_ticket_conversations_ticket ON service.ticket_conversations(ticket_id);
    CREATE INDEX IF NOT EXISTS idx_service_ticket_conversations_created ON service.ticket_conversations(created_at);
    
    -- Create trigger for updated_at timestamp
    DROP TRIGGER IF EXISTS trigger_ticket_conversations_updated_at ON service.ticket_conversations;
    CREATE TRIGGER trigger_ticket_conversations_updated_at
        BEFORE UPDATE ON service.ticket_conversations
        FOR EACH ROW
        EXECUTE FUNCTION update_updated_at_column();
    
    -- Grant permissions on the ticket_conversations table
    -- Customers can see non-internal conversations for their tickets
    GRANT SELECT ON service.ticket_conversations TO customer;
    -- Staff can read all and create new conversations
    GRANT SELECT, INSERT, UPDATE ON service.ticket_conversations TO staff;
    -- Admin has full access
    GRANT ALL ON service.ticket_conversations TO admin;
END $$;
