openapi: 3.0.3
info:
  title: Bazaar API
  description: API for managing users with admin scope access
  version: 1.0.0
servers:
  - url: /api
    description: API base path

paths:
  /version:
    get:
      summary: Get service version information
      description: Returns version information including git commit, tag, build date, and service details
      operationId: getVersion
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'

  /me:
    get:
      summary: Get current user information
      description: Returns the authenticated user's information along with their person record
      operationId: getMe
      security:
        - albHeaderAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeResponse'
        '401':
          description: Unauthorized - missing or invalid authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /me/settings:
    get:
      summary: Get user settings and preferences
      description: Returns the authenticated user's account settings including newsletter preferences
      operationId: getUserSettings
      security:
        - albHeaderAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSettingsResponse'
        '401':
          description: Unauthorized - missing or invalid authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /me/newsletter-preferences:
    put:
      summary: Update user newsletter subscription preferences
      description: Updates the authenticated user's newsletter subscription preferences
      operationId: updateNewsletterPreferences
      security:
        - albHeaderAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewsletterPreferencesRequest'
      responses:
        '200':
          description: Preferences updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSubscriptionPreferences'
        '400':
          description: Bad request - invalid preferences data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - missing or invalid authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users:
    get:
      summary: Get list of users
      description: Returns a list of all users (requires admin scope)
      operationId: getUsers
      security:
        - adminAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized - missing or invalid admin scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /legal-jurisdictions:
    get:
      summary: Get list of legal jurisdictions
      description: Returns a list of all legal jurisdictions with names and codes
      operationId: getLegalJurisdictions
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LegalJurisdiction'

  /trademark/search:
    post:
      summary: Search for existing trademarks
      description: Search the USPTO database for existing trademarks that might conflict with a proposed trademark name
      operationId: searchTrademarks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrademarkSearchRequest'
      responses:
        '200':
          description: Search completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrademarkSearchResponse'
        '400':
          description: Invalid search request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /validate:
    post:
      summary: Validate Sagebrush Standards notation
      description: Validates a notation document according to the Sagebrush Standards specification including YAML structure, state machines, question references, and variable interpolation
      operationId: validateNotation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidationRequest'
      responses:
        '200':
          description: Validation completed (may contain errors)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '400':
          description: Invalid request format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'

  /lawyers/contact:
    post:
      summary: Submit lawyer inquiry
      description: Submit a consultation request for the Lawyer AI platform
      operationId: submitLawyerInquiry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LawyerInquiryRequest'
      responses:
        '201':
          description: Inquiry submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LawyerInquiryResponse'
        '400':
          description: Invalid request format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/newsletters:
    get:
      summary: Get list of newsletters
      description: Returns a list of all newsletters with status and metrics (requires admin scope)
      operationId: getNewsletters
      security:
        - adminAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Newsletter'
        '401':
          description: Unauthorized - missing or invalid admin scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new newsletter
      description: Creates a new newsletter draft (requires admin scope)
      operationId: createNewsletter
      security:
        - adminAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNewsletterRequest'
      responses:
        '201':
          description: Newsletter created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Newsletter'
        '400':
          description: Bad request - invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - missing or invalid admin scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/newsletters/{newsletterId}:
    get:
      summary: Get newsletter by ID
      description: Returns a specific newsletter by ID (requires admin scope)
      operationId: getNewsletterById
      security:
        - adminAuth: []
      parameters:
        - name: newsletterId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Newsletter ID
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Newsletter'
        '401':
          description: Unauthorized - missing or invalid admin scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Newsletter not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update newsletter
      description: Updates a newsletter draft (requires admin scope, only drafts can be updated)
      operationId: updateNewsletter
      security:
        - adminAuth: []
      parameters:
        - name: newsletterId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Newsletter ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateNewsletterRequest'
      responses:
        '200':
          description: Newsletter updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Newsletter'
        '400':
          description: Bad request - invalid input or newsletter already sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - missing or invalid admin scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Newsletter not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete newsletter
      description: Deletes a newsletter draft (requires admin scope, only drafts can be deleted)
      operationId: deleteNewsletter
      security:
        - adminAuth: []
      parameters:
        - name: newsletterId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Newsletter ID
      responses:
        '204':
          description: Newsletter deleted successfully
        '400':
          description: Bad request - newsletter already sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - missing or invalid admin scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Newsletter not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/newsletters/{newsletterId}/send:
    post:
      summary: Send newsletter
      description: Sends a newsletter to all subscribers (requires admin scope, can only be sent once)
      operationId: sendNewsletter
      security:
        - adminAuth: []
      parameters:
        - name: newsletterId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Newsletter ID
      responses:
        '200':
          description: Newsletter sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Newsletter'
        '400':
          description: Bad request - newsletter already sent or invalid state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - missing or invalid admin scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Newsletter not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /newsletters:
    get:
      summary: Get public newsletter list
      description: Returns a list of sent newsletters for public viewing with pagination
      operationId: getPublicNewsletters
      parameters:
        - name: type
          in: query
          required: false
          schema:
            type: string
            enum: [nv-sci-tech, sagebrush, neon-law]
          description: Filter by newsletter type
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Number of newsletters per page
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  newsletters:
                    type: array
                    items:
                      $ref: '#/components/schemas/Newsletter'
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                      limit:
                        type: integer
                      total:
                        type: integer
                      totalPages:
                        type: integer
                    required: [page, limit, total, totalPages]
                required: [newsletters, pagination]
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /newsletters/{newsletterType}/{date}:
    get:
      summary: Get public newsletter
      description: Returns a sent newsletter for public viewing
      operationId: getPublicNewsletter
      parameters:
        - name: newsletterType
          in: path
          required: true
          schema:
            type: string
            enum: [nv-sci-tech, sagebrush, neon-law]
          description: Newsletter type
        - name: date
          in: path
          required: true
          schema:
            type: string
            pattern: '^\d{4}\d{2}$'
          description: Newsletter date in YYYYMM format
          example: "202501"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicNewsletter'
        '404':
          description: Newsletter not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Version:
      type: object
      required:
        - serviceName
        - gitCommit
        - gitTag
        - buildDate
        - swiftVersion
      properties:
        serviceName:
          type: string
          description: Name of the service
          example: Bazaar
        gitCommit:
          type: string
          description: Git commit SHA (short)
          example: abc1234
        gitTag:
          type: string
          description: Git tag or 'latest' for non-tagged builds
          example: v1.2.3
        buildDate:
          type: string
          format: date-time
          description: Build timestamp in ISO 8601 format
          example: 2024-01-01T12:00:00Z
        swiftVersion:
          type: string
          description: Swift compiler version used
          example: 6.1+

    User:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          description: User's email address
          example: user@example.com

    MeResponse:
      type: object
      required:
        - user
        - person
      properties:
        user:
          $ref: '#/components/schemas/UserDetail'
        person:
          $ref: '#/components/schemas/PersonDetail'

    UserDetail:
      type: object
      required:
        - id
        - username
        - role
      properties:
        id:
          type: string
          format: uuid
          description: User's unique identifier
          example: 123e4567-e89b-12d3-a456-426614174000
        username:
          type: string
          description: User's username (email)
          example: user@example.com
        role:
          type: string
          enum: [customer, staff, admin]
          description: User's role in the system
          example: staff

    PersonDetail:
      type: object
      required:
        - id
        - name
        - email
      properties:
        id:
          type: string
          format: uuid
          description: Person's unique identifier
          example: 123e4567-e89b-12d3-a456-426614174000
        name:
          type: string
          description: Person's full name
          example: John Doe
        email:
          type: string
          format: email
          description: Person's email address
          example: john.doe@example.com

    UserSettingsResponse:
      type: object
      required:
        - user
        - person
        - subscriptionPreferences
      properties:
        user:
          $ref: '#/components/schemas/UserDetail'
        person:
          $ref: '#/components/schemas/PersonDetail'
        subscriptionPreferences:
          $ref: '#/components/schemas/UserSubscriptionPreferences'

    UserSubscriptionPreferences:
      type: object
      required:
        - userId
        - isSubscribedToSciTech
        - isSubscribedToSagebrush
        - isSubscribedToNeonLaw
      properties:
        userId:
          type: string
          format: uuid
          description: User's unique identifier
          example: 123e4567-e89b-12d3-a456-426614174000
        isSubscribedToSciTech:
          type: boolean
          description: Whether user is subscribed to NV Sci Tech newsletter
          example: true
        isSubscribedToSagebrush:
          type: boolean
          description: Whether user is subscribed to Sagebrush newsletter
          example: false
        isSubscribedToNeonLaw:
          type: boolean
          description: Whether user is subscribed to Neon Law newsletter
          example: true

    NewsletterPreferencesRequest:
      type: object
      properties:
        isSubscribedToSciTech:
          type: boolean
          description: Whether to subscribe to NV Sci Tech newsletter
          example: true
        isSubscribedToSagebrush:
          type: boolean
          description: Whether to subscribe to Sagebrush newsletter
          example: false
        isSubscribedToNeonLaw:
          type: boolean
          description: Whether to subscribe to Neon Law newsletter
          example: true

    LegalJurisdiction:
      type: object
      required:
        - name
        - code
      properties:
        name:
          type: string
          description: Name of the legal jurisdiction
          example: Nevada
        code:
          type: string
          description: Short code for the jurisdiction
          example: NV

    Error:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: Error message
          example: Insufficient permissions

    ValidationRequest:
      type: object
      required:
        - content
      properties:
        content:
          type: string
          description: The notation content to validate (includes YAML frontmatter and markdown)
          example: |
            ---
            title: Example Document
            code: example_doc
            description: An example document for validation
            respondent_type: org
            flow:
              BEGIN:
                _: END
            alignment:
              BEGIN:
                _: END
            ---
            # Example Document

            This is an example document with {{variable}} interpolation.
        validateOnly:
          type: boolean
          description: Whether to only validate without saving
          default: true
          example: true
        returnWarnings:
          type: boolean
          description: Whether to include warnings in the response
          default: true
          example: true

    ValidationResponse:
      type: object
      required:
        - valid
        - errors
        - warnings
      properties:
        valid:
          type: boolean
          description: Whether the notation is valid
          example: false
        errors:
          type: array
          description: Array of validation errors
          items:
            $ref: '#/components/schemas/ValidationError'
        warnings:
          type: array
          description: Array of validation warnings
          items:
            $ref: '#/components/schemas/ValidationWarning'

    ValidationError:
      type: object
      required:
        - type
        - message
      properties:
        type:
          type: string
          description: Type of error
          example: missing_field
        field:
          type: string
          description: Field that has the error (if applicable)
          example: code
        message:
          type: string
          description: Human-readable error message
          example: "Required field 'code' is missing"
        line:
          type: integer
          description: Line number where error occurs (if applicable)
          example: null
        suggestion:
          type: string
          description: Suggestion for fixing the error
          example: "Add 'code: unique_identifier' to the YAML frontmatter"

    ValidationWarning:
      type: object
      required:
        - type
        - message
      properties:
        type:
          type: string
          description: Type of warning
          example: undefined_variable
        variable:
          type: string
          description: Variable that may be problematic (if applicable)
          example: person.signature
        message:
          type: string
          description: Human-readable warning message
          example: "Variable 'person.signature' may be undefined"
        line:
          type: integer
          description: Line number where warning occurs (if applicable)
          example: 45

    TrademarkSearchRequest:
      type: object
      required:
        - searchTerm
      properties:
        searchTerm:
          type: string
          description: The trademark name to search for
          example: "Acme Corporation"
        searchClasses:
          type: array
          description: Specific USPTO classes to search within (1-45)
          items:
            type: integer
            minimum: 1
            maximum: 45
          example: [35, 42]
        exactMatch:
          type: boolean
          description: Whether to search for exact matches only
          default: false
          example: false

    TrademarkSearchResponse:
      type: object
      required:
        - searchTerm
        - totalResults
        - results
        - suggestedClasses
      properties:
        searchTerm:
          type: string
          description: The original search term
          example: "Acme Corporation"
        totalResults:
          type: integer
          description: Total number of trademark matches found
          example: 3
        results:
          type: array
          description: Array of trademark search results
          items:
            $ref: '#/components/schemas/TrademarkResult'
        suggestedClasses:
          type: array
          description: Suggested USPTO classes for this type of trademark
          items:
            $ref: '#/components/schemas/USPTOClass'
        neonLawConsultation:
          type: object
          description: Information about Neon Law partnership for trademark filing
          properties:
            available:
              type: boolean
              description: Whether Neon Law consultation is available
              example: true
            pricePerClass:
              type: integer
              description: Price in USD for trademark filing per class
              example: 499
            contactEmail:
              type: string
              description: Contact email for Neon Law services
              example: "trademarks@neonlaw.com"

    TrademarkResult:
      type: object
      required:
        - serialNumber
        - markText
        - status
        - filingDate
        - classes
      properties:
        serialNumber:
          type: string
          description: USPTO serial number for the trademark
          example: "88123456"
        markText:
          type: string
          description: The trademark text or description
          example: "ACME CORP"
        status:
          type: string
          description: Current status of the trademark
          example: "LIVE"
        filingDate:
          type: string
          format: date
          description: Date the trademark was filed
          example: "2020-01-15"
        registrationDate:
          type: string
          format: date
          description: Date the trademark was registered (if applicable)
          example: "2021-03-20"
        classes:
          type: array
          description: USPTO classes this trademark is registered in
          items:
            type: integer
          example: [35, 42]
        owner:
          type: string
          description: Name of the trademark owner
          example: "Acme Corporation Inc."
        similarity:
          type: number
          format: float
          description: Similarity score to search term (0.0-1.0)
          minimum: 0.0
          maximum: 1.0
          example: 0.85

    USPTOClass:
      type: object
      required:
        - classNumber
        - description
        - category
      properties:
        classNumber:
          type: integer
          description: USPTO class number (1-45)
          minimum: 1
          maximum: 45
          example: 35
        description:
          type: string
          description: Description of what this class covers
          example: "Advertising; business management; business administration; office functions"
        category:
          type: string
          enum: ["goods", "services"]
          description: Whether this class covers goods or services
          example: "services"
        commonExamples:
          type: array
          description: Common examples of items in this class
          items:
            type: string
          example: ["Business consulting", "Marketing services", "Office administration"]

    LawyerInquiryRequest:
      type: object
      required:
        - firm_name
        - contact_name
        - email
      properties:
        firm_name:
          type: string
          description: Name of the law firm
          example: "Smith & Associates Law Firm"
        contact_name:
          type: string
          description: Name of the contact person
          example: "John Smith"
        email:
          type: string
          format: email
          description: Contact email address
          example: "john@smithlaw.com"
        nevada_bar_member:
          type: string
          enum: ["yes", "no", "considering"]
          description: Nevada Bar membership status
          example: "yes"
        current_software:
          type: string
          description: Current case management software in use
          example: "Clio"
        use_cases:
          type: string
          description: AI use case interests
          example: "Contract analysis, legal research, document drafting"

    LawyerInquiryResponse:
      type: object
      required:
        - id
        - message
        - submittedAt
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the inquiry
          example: "123e4567-e89b-12d3-a456-426614174000"
        message:
          type: string
          description: Confirmation message
          example: "Thank you for your interest in Sagebrush Legal AI. We will contact you within 1 business day."
        submittedAt:
          type: string
          format: date-time
          description: Timestamp when the inquiry was submitted
          example: "2024-01-01T12:00:00Z"

    Newsletter:
      type: object
      required:
        - id
        - name
        - subjectLine
        - markdownContent
        - recipientCount
        - createdBy
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the newsletter
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          enum: [nv-sci-tech, sagebrush, neon-law]
          description: Newsletter type/name
          example: "nv-sci-tech"
        subjectLine:
          type: string
          description: Email subject line for the newsletter
          maxLength: 200
          example: "Latest Science & Technology News - January 2025"
        markdownContent:
          type: string
          description: Newsletter content in markdown format
          example: "# Newsletter Title\n\nThis is the newsletter content."
        sentAt:
          type: string
          format: date-time
          nullable: true
          description: Timestamp when the newsletter was sent (null if draft)
          example: "2025-01-15T10:00:00Z"
        recipientCount:
          type: integer
          minimum: 0
          description: Number of recipients the newsletter was sent to
          example: 1250
        createdBy:
          type: string
          format: uuid
          description: Admin user who created the newsletter
          example: "123e4567-e89b-12d3-a456-426614174000"
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the newsletter was created
          example: "2025-01-15T09:00:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the newsletter was last updated
          example: "2025-01-15T09:30:00Z"

    CreateNewsletterRequest:
      type: object
      required:
        - name
        - subjectLine
        - markdownContent
      properties:
        name:
          type: string
          enum: [nv-sci-tech, sagebrush, neon-law]
          description: Newsletter type/name
          example: "nv-sci-tech"
        subjectLine:
          type: string
          description: Email subject line for the newsletter
          maxLength: 200
          example: "Latest Science & Technology News - January 2025"
        markdownContent:
          type: string
          description: Newsletter content in markdown format
          example: "# Newsletter Title\n\nThis is the newsletter content."

    UpdateNewsletterRequest:
      type: object
      properties:
        subjectLine:
          type: string
          description: Email subject line for the newsletter
          maxLength: 200
          example: "Updated Subject Line"
        markdownContent:
          type: string
          description: Newsletter content in markdown format
          example: "# Updated Newsletter Title\n\nThis is updated content."

    PublicNewsletter:
      type: object
      required:
        - id
        - name
        - subjectLine
        - markdownContent
        - sentAt
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the newsletter
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          enum: [nv-sci-tech, sagebrush, neon-law]
          description: Newsletter type/name
          example: "nv-sci-tech"
        subjectLine:
          type: string
          description: Email subject line for the newsletter
          example: "Latest Science & Technology News - January 2025"
        markdownContent:
          type: string
          description: Newsletter content in markdown format
          example: "# Newsletter Title\n\nThis is the newsletter content."
        sentAt:
          type: string
          format: date-time
          description: Timestamp when the newsletter was sent
          example: "2025-01-15T10:00:00Z"

  securitySchemes:
    albHeaderAuth:
      type: apiKey
      in: header
      name: x-amzn-oidc-data
      description: >
        AWS Application Load Balancer with Cognito authentication.

        **Production Environment:**
        - Headers automatically injected by AWS ALB after successful Cognito authentication
        - JWT token contains user identity and claims
        - No manual header setup required - handled by infrastructure

        **Development Environment:**
        - Headers automatically injected by LocalMockAuthenticator
        - Set LUXE_ENV=development to enable automatic header injection
        - No manual configuration required for local testing

        **Required Headers (automatically provided):**
        - `x-amzn-oidc-data`: JWT with user information
        - `x-amzn-oidc-accesstoken`: Access token
        - `x-amzn-oidc-identity`: User identity

        **Testing with curl/Postman:**
        Use the development headers provided by the migration tool:
        ```bash
        swift run Vegas migrate-sessions --mode generate-headers
        ```

        **Migration from Session-Based Auth:**
        - No more session cookies or server-side sessions
        - Authentication is stateless and handled by ALB/Cognito
        - See BREAKING_CHANGES.md for migration details
    adminAuth:
      type: apiKey
      in: header
      name: x-amzn-oidc-data
      description: >
        Admin-level authentication via AWS ALB/Cognito headers.

        Same as `albHeaderAuth` but requires admin role in Cognito groups.

        **Admin Access Requirements:**
        - User must be member of 'admin' Cognito group
        - ALB injects user groups in JWT claims
        - SmartAuthMiddleware validates admin permissions

        **Available Admin Roles:**
        - `admin`: Full system access
        - `staff`: Limited admin functionality

        **Role Mapping:**
        - Cognito groups automatically mapped to user roles
        - No database changes required for role management
