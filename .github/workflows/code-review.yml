name: Claude Code Review

permissions:
  pull-requests: write
  contents: read
  issues: write

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  pull_request:
    types: [opened]

jobs:
  claude-review:
    # Only run on pull request comments with /review command
    if: |
      (github.event_name == 'issue_comment' && 
       github.event.issue.pull_request && 
       contains(github.event.comment.body, '/review')) ||
      (github.event_name == 'pull_request_review_comment' && 
       contains(github.event.comment.body, '/review')) ||
      (github.event_name == 'pull_request')
    
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Run Claude Code Review
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          prompt: |
            You are reviewing a pull request for the Luxe project, a full-stack Swift monorepo.
            
            Please perform a comprehensive code review focusing on:
            
            1. **Swift Best Practices**
               - Protocol-oriented design principles
               - Proper use of value types vs reference types
               - Swift concurrency (async/await, actors)
               - Optional handling and nil-coalescing
            
            2. **Project Standards (from CLAUDE.md)**
               - Swift-only code (except SQL/Markdown)
               - Vapor framework for server-side
               - Swift Testing framework (never XCTest)
               - Dependency injection patterns
               - Service layer architecture
            
            3. **Code Quality**
               - Clean, readable code
               - Proper error handling
               - No compiler warnings
               - Cross-platform compatibility (macOS and Linux)
               - Memory safety and performance
            
            4. **Security Considerations**
               - OAuth2/OIDC implementation
               - JWT validation
               - SQL injection prevention
               - Input validation
               - Secrets management
            
            5. **Testing**
               - Test coverage for new functionality
               - Use of Swift Testing framework
               - Mock implementations for dependencies
               - Edge case handling
            
            6. **Database & API**
               - Migration safety (never modify existing)
               - OpenAPI specification compliance
               - RESTful design principles
               - Proper HTTP status codes
            
            Please provide:
            - A summary of the changes
            - Specific issues that must be addressed
            - Suggestions for improvements
            - Positive feedback on well-implemented features
            
            Be constructive and educational in your feedback.
          claude_args: "--max-turns 3"